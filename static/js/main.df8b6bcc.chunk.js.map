{"version":3,"sources":["Person/Person.js","App.js","reportWebVitals.js","index.js"],"names":["person","props","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","otherState","switchNameHandler","newName","setState","nameChangedHandler","event","target","style","backgroundColor","font","border","padding","this","bind","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAeeA,G,YAZA,SAACC,GACZ,OACI,sBAAKC,UAAU,SAAf,UACK,oBAAGC,QAASF,EAAMG,MAAlB,kBAA+BH,EAAMI,KAArC,aAAqDJ,EAAMK,IAA3D,iBACA,4BAAIL,EAAMM,WACV,uBAAOC,KAAK,OAAOC,SAAUR,EAAMS,QAASC,MAASV,EAAMI,YC6DzDO,E,4MAhEbC,MAAQ,CACNC,QAAS,CACP,CAAET,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAM,QAASC,IAAK,KAExBS,WAAY,oB,EAGdC,kBAAoB,SAACC,GAGnB,EAAKC,SAAS,CACZJ,QAAS,CACP,CAAET,KAAMY,EAASX,IAAK,IACtB,CAAED,KAAM,WAAYC,IAAK,Q,EAO/Ba,mBAAqB,SAACC,GACpB,EAAKF,SAAS,CACZJ,QAAS,CACP,CAAET,KAAM,OAAQC,IAAK,IACrB,CAAED,KAAMe,EAAMC,OAAOV,MAAOL,IAAK,Q,uDAgBrC,OACE,sBAAKJ,UAAU,MAAf,UACE,qDACA,yDACA,wBACAoB,MAfU,CACZC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,gBACRC,QAAS,OAYPvB,QAASwB,KAAKX,kBAAkBY,KAAKD,KAAM,WAF3C,0BAGA,cAAC,EAAD,CACEtB,KAAMsB,KAAKd,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKqB,KAAKd,MAAMC,QAAQ,GAAGR,IAC3BF,MAAOuB,KAAKX,kBAAkBY,KAAKD,KAAM,aAC3C,cAAC,EAAD,CACEtB,KAAMsB,KAAKd,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKqB,KAAKd,MAAMC,QAAQ,GAAGR,IAC3BI,QAASiB,KAAKR,mBAHhB,mC,GArDUU,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df8b6bcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\n\r\nconst person = (props) => {\r\n    return (\r\n        <div className=\"Person\">\r\n             <p onClick={props.click}> I'm {props.name} and I am {props.age} years old!</p>\r\n             <p>{props.children}</p>\r\n             <input type=\"text\" onChange={props.changed} value = {props.name}/>\r\n            </div>\r\n   \r\n    )\r\n};\r\n\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person'\n\nclass App extends Component {\n  state = {\n    persons: [\n      { name: \"Eric\", age: 23},\n      { name: 'Kevin', age: 26}\n    ],\n    otherState: 'some other value'\n  }\n\n  switchNameHandler = (newName) => {\n    //console.log('Was clicked!');\n    // Don't do this this.state.persons[0].name = 'Eric Xu';\n    this.setState({ //only works for class Components that extend component\n      persons: [\n        { name: newName, age: 23},\n        { name: 'Kevin Xu', age: 26}\n      ]\n    } );\n  }\n\n  //only way to change dom is to change props and state\n\n  nameChangedHandler = (event) => {\n    this.setState({\n      persons: [\n        { name: 'Eric', age: 23},\n        { name: event.target.value, age: 26}\n      ]\n    } );\n  }\n\n  render() {\n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1x solid blue',\n      padding: '8px'\n\n  };\n\n\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <p> This is really working!</p>\n        <button\n        style={style}\n        onClick={this.switchNameHandler.bind(this, 'Eric Xu')}> Switch Name</button>\n        <Person\n          name={this.state.persons[0].name} \n          age={this.state.persons[0].age} \n          click={this.switchNameHandler.bind(this, 'Eric!!!')}/>\n        <Person \n          name={this.state.persons[1].name} \n          age={this.state.persons[1].age}\n          changed={this.nameChangedHandler}>My hobbies: gg\n          </Person>\n          \n        </div>\n      );\n    // compiles to this: return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}