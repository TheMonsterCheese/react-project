{"version":3,"sources":["Person/Person.js","App.js","reportWebVitals.js","index.js"],"names":["Radium","props","className","style","width","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","otherState","showPersons","deletePersonHandler","personIndex","splice","setState","nameChangedHandler","event","findIndex","p","person","target","togglePersonsHandler","doesShow","backgroundColor","font","border","padding","cursor","color","this","map","index","classes","length","push","join","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAsBeA,eAlBA,SAACC,GAOZ,OACI,sBAAKC,UAAU,SAASC,MAPd,CACV,4BAA4B,CACxBC,MAAM,UAKV,UACK,oBAAGC,QAASJ,EAAMK,MAAlB,kBAA+BL,EAAMM,KAArC,aAAqDN,EAAMO,IAA3D,iBACA,4BAAIP,EAAMQ,WACV,uBAAOC,KAAK,OAAOC,SAAUV,EAAMW,QAASC,MAASZ,EAAMM,a,QCVlEO,E,4MACJC,MAAQ,CACNC,QAAS,CACP,CAAEC,GAAI,QAASV,KAAM,OAAQC,IAAK,IAClC,CAAES,GAAI,QAASV,KAAM,QAASC,IAAK,IACnC,CAAES,GAAI,SAAUV,KAAM,MAAOC,IAAK,KAEpCU,WAAY,mBACZC,aAAa,G,EAIfC,oBAAsB,SAACC,GACrB,IAAML,EAAO,YAAO,EAAKD,MAAMC,SAI/BA,EAAQM,OAAOD,EAAY,GAC3B,EAAKE,SAAS,CAACP,QAASA,K,EAK1BQ,mBAAqB,SAACC,EAAOR,GAC3B,IAAMI,EAAc,EAAKN,MAAMC,QAAQU,WAAU,SAAAC,GAC/C,OAAOA,EAAEV,KAAOA,KAGZW,EAAM,eACP,EAAKb,MAAMC,QAAQK,IAGxBO,EAAOrB,KAAOkB,EAAMI,OAAOhB,MAE3B,IAAMG,EAAO,YAAO,EAAKD,MAAMC,SAC/BA,EAAQK,GAAeO,EAEvB,EAAKL,SAAS,CAACP,QAASA,K,EAI5Bc,qBAAuB,WACrB,IAAMC,EAAW,EAAKhB,MAAMI,YAC5B,EAAKI,SAAS,CAACJ,aAAcY,K,uDAGnB,IAAD,OACD5B,EAAQ,CACZ6B,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,UACR,SAAU,CACRJ,gBAAiB,aACjBK,MAAO,UAKTrB,EAAU,KAEXsB,KAAKvB,MAAMI,cAEZH,EACA,8BAEGsB,KAAKvB,MAAMC,QAAQuB,KAAI,SAACX,EAAQY,GAC/B,OAAO,cAAC,EAAD,CACLlC,MAAO,kBAAM,EAAKc,oBAAoBoB,IACtCjC,KAAMqB,EAAOrB,KACbC,IAAKoB,EAAOpB,IAEZI,QAAS,SAACa,GAAD,OAAW,EAAKD,mBAAmBC,EAAOG,EAAOX,MADrDW,EAAOX,SAQhBd,EAAM6B,gBAAgB,MACtB7B,EAAM,UAAY,CAChB6B,gBAAiB,SACjBK,MAAO,UAIb,IAAMI,EAAU,GAWd,OATCH,KAAKvB,MAAMC,QAAQ0B,QAAU,GAE9BD,EAAQE,KAAK,OAEZL,KAAKvB,MAAMC,QAAQ0B,QAAQ,GAE5BD,EAAQE,KAAK,QAIb,cAAC,IAAD,UACE,sBAAKzC,UAAU,MAAf,UACE,qDACA,mBAAGA,UAAWuC,EAAQG,KAAK,KAA3B,sCACA,wBACAzC,MAAOA,EACPE,QAASiC,KAAKR,qBAFd,6BAGCd,W,GA1GS6B,aAmHH7C,cAAOc,GC5GPgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1d41f3fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\nimport Radium from 'radium';\r\n\r\nconst person = (props) => {\r\n    const style = {\r\n        '@media (min-width: 500px)':{\r\n            width:'450px'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Person\" style={style}>\r\n             <p onClick={props.click}> I'm {props.name} and I am {props.age} years old!</p>\r\n             <p>{props.children}</p>\r\n             <input type=\"text\" onChange={props.changed} value = {props.name}/>\r\n            </div>\r\n   \r\n    )\r\n};\r\n\r\n\r\nexport default Radium(person);","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person'\nimport Radium, {StyleRoot} from 'radium';\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"asdf1\", name: \"Eric\", age: 23},\n      { id: \"asdf2\", name: 'Kevin', age: 26},\n      { id: \"asb;dl\", name: \"Bob\", age: 22}\n    ],\n    otherState: 'some other value',\n    showPersons: false\n  }\n\n\n  deletePersonHandler = (personIndex) => {\n    const persons = [...this.state.persons]; \n    //spread makes a copy ofth elements instead of being a reference to the object\n\n    //const persons = this.state.persons.slice();\n    persons.splice(personIndex,1);\n    this.setState({persons: persons});\n  }\n\n  //only way to change dom is to change props and state\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = event.target.value\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person; \n\n    this.setState({persons: persons});\n  }\n\n\ntogglePersonsHandler = () => {\n  const doesShow = this.state.showPersons;\n  this.setState({showPersons: !doesShow});\n}\n\n  render() {\n    const style = {\n      backgroundColor: 'green',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n      //use inline style to scope it to only one element\n  };\n\n  let persons = null;\n\n  if(this.state.showPersons)\n  {\n    persons = (\n    <div>\n\n      {this.state.persons.map((person, index) => {\n        return <Person\n          click={() => this.deletePersonHandler(index)}\n          name={person.name}\n          age={person.age}\n          key={person.id}\n          changed={(event) => this.nameChangedHandler(event, person.id)} />;\n\n          \n      })}\n      </div>\n       );\n\n      style.backgroundColor='red';\n      style[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      }\n  }\n\n  const classes = [];\n\n  if(this.state.persons.length <= 2)\n  {\n    classes.push('red'); //classes = [red];\n  }\n  if(this.state.persons.length<=1)\n  {\n    classes.push('bold');\n  }\n\n    return (\n    <StyleRoot>\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <p className={classes.join(' ')}> This is really working!</p>\n        <button\n        style={style}\n        onClick={this.togglePersonsHandler}> Toggle Persons</button>\n        {persons} \n  \n      </div>\n    </StyleRoot>\n      );\n    // compiles to this: return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n    }\n}\n\nexport default Radium(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}